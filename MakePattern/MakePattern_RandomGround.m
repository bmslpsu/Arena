function [pattern] = MakePattern_RandomGround(root )
%---------------------------------------------------------------------------------------------------------------------------------
% MakePattern_RandomGround: creates pattern of vertical bars with varying widths
% stimulus
    % INPUTS:
        % root      :	folder to save pattern
        % playPat   :   boolean to play pattern (1 is on, 0 is off): if any other number >>> playback at that frequency 
        % savePat   :   boolean to save pattern (1 is on, 0 is off)
  	% OUTPUTS:
        % -
%---------------------------------------------------------------------------------------------------------------------------------
%   This program creates one structure ('pattern').  The relevant components of
%   this structure are as follows:
%
%       pattern  -  the parent structure
%               .x_num          -   xpos limits
%                                   by convention, xpos relates to translation and
%                                   rotations of a static pattern
%               .y_num          -   ypos limits
%                                   by convention, ypos relates to non-length
%                                   conserving transformations
%               .x_panels       -   number of panels in x direction
%               .y_panels       -   number of panels in y directions
%               .num_panels     -   number of panels in array
%                                   (.x_panels*.y_panels)
%               .panel_size     -   '0' gives default 8x8, '1' allows user specific
%               .gs_val         -   gray scale value (1-4)
%               .Pats           -   data for the panels...a 4D array where
%                                   (x_panels*x_size,y_panels*y_size,xpos,ypos)
%               .Panel_map      -   a 2x2 array specifying the location of the
%                                   named panels indexed from '1'
%               .BitMapIndex	-   output generated by executing
%                                   'process_panel_map(pattern);'
%               .data           -   output generated by executing
%                                   'make_pattern_vector(pattern);'
%% DEBUGGING %%
% ONLY UNCOMMENT & RUN THIS SECTION IF DEBUGGING %
%---------------------------------------------------------------------------------------------------------------------------------
%     root = 'C:\';
%     playPat = 1;
%     savePat = 0;
%% Setup Parameters %%
%---------------------------------------------------------------------------------------------------------------------------------
pattern.num_panels = 48;        % # panels in arena
pattern.gs_val = 4;             % grey-scale #: 4 = 0:15
pattern.row_compression = 1;    % condense columns  = ON
pattern.x_num = 96;             % # x-frames
pattern.y_num = 4;             % # x-frames

pixelX = pattern.x_num;                         % # X pixels
pixelY = pattern.num_panels/(pattern.x_num/8);  % # Y pixels

Int.High = 15; % high intensity value (0-15)
Int.Low = 0;   % low intensity value (0-15)

%% Make Pattern Matrix %%
%---------------------------------------------------------------------------------------------------------------------------------
Pats = zeros(pixelY, pixelX, pattern.x_num, pattern.y_num); % preallocate pattern matrix
clc
%Initialize Pattern
A = 0;
while A == 0
    %Band-pass filter pattern
    %make sure background contrast at 50%
    C = 1;
    while C == 1
        pattern_back = round(repmat(rand(1,pixelX),[pixelY 1])); % create random background
        % if overall contrast of background and figure = 50%
        if (sum(pattern_back(1,:)) == pixelX/2)
            wc = diff(pattern_back(1,:));
            mm = 1;
            for jj = 1:length(wc)-1
                if (abs(wc(jj)) == 1) && (abs(wc(jj+1)) == 1)  % 1 pixel column
                    mm = mm + 1;
                end
            end
            if mm <= 10 % allow only 10 elements with widths = 3.75deg
                C = 0;
            end
        end
    end
    pattern_back(pattern_back==0) = Int.Low;
    pattern_back(pattern_back==1) = Int.High;
    figure; imagesc(pattern_back);
    A = input('Accept pattern? (1=yes,0=no): '); % 1 yes, 0 no
    
    close all
end

% Move through x-channel
kk = 0;
for ii = 1:pattern.y_num
    for jj = 1:pattern.x_num
        Pats(:,:,jj,ii) = circshift(pattern_back, [0 kk]); % rotate ground by 1 pixel
        kk = kk + 1;
    end
end

%% Save Pattern %%
%---------------------------------------------------------------------------------------------------------------------------------
pattern.Pats = Pats; % store pattern data
pattern.Panel_map = [12 8 4 11 7 3 10 6 2  9 5 1;...  % store arena panel layout
                     24 20 16 23 19 15 22 18 14 21 17 13;...
                     36 32 28 35 31 27 34 30 26 33 29 25;...
                     48 44 40 47 43 39 46 42 38 45 41 37];
pattern.BitMapIndex = process_panel_map(pattern);
pattern.data = Make_pattern_vector(pattern);
    
if nargin==1
    str = [root '\Pattern_RandomGround_Cont=' num2str(Int.High) '-' num2str(Int.Low) '_48Pan.mat'];
    save(str, 'pattern');
end
disp('DONE')
end