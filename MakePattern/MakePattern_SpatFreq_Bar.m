function [] = MakePattern_SpatFreq_Bar(figwidth,barwidth,root,savePat)
%---------------------------------------------------------------------------------------------------------------------------------
% MakePattern_SpatFreq_Bar: makes pattern 
% Channel-X: changes spatial frequency
% Channel-Y: rotates ground
%   INPUTS:
%       freq:       row vector containing spatial frequencies in degress
%       root:       directory to save file
%       savePat:    boolean (1 = save pattern)
%   OUTPUTS:
%---------------------------------------------------------------------------------------------------------------------------------
%   This program creates one structure ('pattern').  The relevant components of
%   this structure are as follows:
%
%       pattern  -  the parent structure
%               .x_num          -   xpos limits
%                                   by convention, xpos relates to translation and
%                                   rotations of a static pattern
%               .y_num          -   ypos limits
%                                   by convention, ypos relates to non-length
%                                   conserving transformations
%               .x_panels       -   number of panels in x direction
%               .y_panels       -   number of panels in y directions
%               .num_panels     -   number of panels in array
%                                   (.x_panels*.y_panels)
%               .panel_size     -   '0' gives default 8x8, '1' allows user specific
%               .gs_val         -   gray scale value (1-4)
%               .Pats           -   data for the panels...a 4D array where
%                                   (x_panels*x_size,y_panels*y_size,xpos,ypos)
%               .Panel_map      -   a 2x2 array specifying the location of the
%                                   named panels indexed from '1'
%               .BitMapIndex	-   output generated by executing
%                                   'process_panel_map(pattern);'
%               .data           -   output generated by executing
%                                   'make_pattern_vector(pattern);'
%---------------------------------------------------------------------------------------------------------------------------------
%% DEBUGGING %%
% ONLY UNCOMMENT & RUN THIS SECTION IF DEBUGGING %
%---------------------------------------------------------------------------------------------------------------------------------
% figwidth = 6;
% barwidth = 3;
% root = 'Q:\Box Sync\Git\Arena\Patterns\';
% savePat = 1;
%% Set up panel variables %%
%---------------------------------------------------------------------------------------------------------------------------------
pattern.x_num = 96;                 % There are 96 pixel around the display (12x8) 
pattern.y_num = 96;                 % There are 96 pixel around the display (12x8) 
pattern.num_panels = 48;            % This is the number of unique Panel IDs required
pattern.gs_val = 1;                 % This pattern will use 2 intensity levels
pattern.row_compression = 1;        % Columns are symmetric
pattern.x_panel = pattern.x_num;
pattern.y_panel = pattern.num_panels*8/pattern.x_num;
Int.High = 1; % high intensity value (0-15)
Int.Low = 0;  % low intensity value (0-15)
%% Make PATS %% d
%---------------------------------------------------------------------------------------------------------------------------------
clc
% Make y-channel
Pats = zeros(pattern.y_panel,pattern.x_panel,pattern.y_num,pattern.x_num);
Period = [Int.High*ones(4,barwidth) , Int.Low*ones(4,barwidth)];
IntPats = repmat(Period,1,pattern.x_num/size(Period,2));
Pats(:,:,1,1) = IntPats;
for ii = 1:pattern.y_num
    Pats(:,:,1,ii+1) = ShiftMatrix(Pats(:,:,1,ii), 1, 'r', 'y');
end

% Make x-channel
figMask = logical([ones(4,figwidth) , zeros(4,pattern.x_num-figwidth)]);
for ii = 1:pattern.y_num
    background = Pats(:,:,1,ii);
    pp = 0;
    for jj = 2:pattern.x_num
        figMask_shift = ShiftMatrix(figMask, pp, 'r', 'y');
        temp = background;
        temp( figMask_shift) = Int.High;
       	Pats(:,:,jj,ii) = temp;
        pp = pp + 1;
    end
end
%% Save Pattern %%
%---------------------------------------------------------------------------------------------------------------------------------
if savePat
    pattern.Pats = Pats; % store pattern data
    pattern.Panel_map = [12 8 4 11 7 3 10 6 2  9 5 1;...  % store arena panel layout
                         24 20 16 23 19 15 22 18 14 21 17 13;...
                         36 32 28 35 31 27 34 30 26 33 29 25;...
                         48 44 40 47 43 39 46 42 38 45 41 37];
    pattern.BitMapIndex = process_panel_map(pattern);
    pattern.data = make_pattern_vector(pattern);
    
    % Save file to root
	str = [root '\Pattern_SpatFreq_Bar_48Pan.mat']; 
    save(str, 'pattern');
end
disp('DONE')
end

